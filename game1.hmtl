<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pong Game</title>
  <style>
    body {
      margin: 0;
      background-color: black;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }

    canvas {
      border: 2px solid white;
    }
  </style>
</head>
<body>
  <canvas id="pongCanvas" width="800" height="600"></canvas>
  <script>
    const canvas = document.getElementById('pongCanvas');
    const ctx = canvas.getContext('2d');

    // Paddle properties
    const paddleWidth = 10, paddleHeight = 100;
    const player = { x: 10, y: canvas.height / 2 - paddleHeight / 2, speed: 5, dy: 0 };
    const ai = { x: canvas.width - 20, y: canvas.height / 2 - paddleHeight / 2, speed: 5 };

    // Ball properties
    const ball = {
      x: canvas.width / 2,
      y: canvas.height / 2,
      radius: 10,
      speedX: 4,
      speedY: 4
    };

    // Draw paddles, ball, and net
    function drawPaddle(x, y) {
      ctx.fillStyle = 'white';
      ctx.fillRect(x, y, paddleWidth, paddleHeight);
    }

    function drawBall(x, y) {
      ctx.beginPath();
      ctx.arc(x, y, ball.radius, 0, Math.PI * 2);
      ctx.fillStyle = 'white';
      ctx.fill();
      ctx.closePath();
    }

    function drawNet() {
      for (let i = 0; i < canvas.height; i += 20) {
        ctx.fillStyle = 'white';
        ctx.fillRect(canvas.width / 2 - 1, i, 2, 10);
      }
    }

    // Move paddles
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowUp') player.dy = -player.speed;
      if (e.key === 'ArrowDown') player.dy = player.speed;
    });

    document.addEventListener('keyup', (e) => {
      if (e.key === 'ArrowUp' || e.key === 'ArrowDown') player.dy = 0;
    });

    function movePlayer() {
      player.y += player.dy;

      // Prevent paddle from going out of bounds
      if (player.y < 0) player.y = 0;
      if (player.y > canvas.height - paddleHeight) player.y = canvas.height - paddleHeight;
    }

    // Move AI paddle
    function moveAI() {
      if (ai.y + paddleHeight / 2 < ball.y - 10) ai.y += ai.speed;
      else if (ai.y + paddleHeight / 2 > ball.y + 10) ai.y -= ai.speed;
    }

    // Update ball position
    function moveBall() {
      ball.x += ball.speedX;
      ball.y += ball.speedY;

      // Wall collision (top/bottom)
      if (ball.y + ball.radius > canvas.height || ball.y - ball.radius < 0) {
        ball.speedY *= -1;
      }

      // Paddle collision
      if (
        (ball.x - ball.radius < player.x + paddleWidth &&
         ball.y > player.y &&
         ball.y < player.y + paddleHeight) ||
        (ball.x + ball.radius > ai.x &&
         ball.y > ai.y &&
         ball.y < ai.y + paddleHeight)
      ) {
        ball.speedX *= -1;
      }

      // Reset ball if it goes out of bounds
      if (ball.x + ball.radius < 0 || ball.x - ball.radius > canvas.width) {
        resetBall();
      }
    }

    function resetBall() {
      ball.x = canvas.width / 2;
      ball.y = canvas.height / 2;
      ball.speedX = 4 * (Math.random() > 0.5 ? 1 : -1);
      ball.speedY = 4 * (Math.random() > 0.5 ? 1 : -1);
    }

    // Main game loop
    function gameLoop() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      drawNet();
      drawPaddle(player.x, player.y);
      drawPaddle(ai.x, ai.y);
      drawBall(ball.x, ball.y);

      movePlayer();
      moveAI();
      moveBall();

      requestAnimationFrame(gameLoop);
    }

    gameLoop();
  </script>
</body>
</html>

